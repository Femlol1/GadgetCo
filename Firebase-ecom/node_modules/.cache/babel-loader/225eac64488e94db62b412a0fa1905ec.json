{"ast":null,"code":"import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { FirebaseError, createMockUserToken, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nconst DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nconst CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nconst DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nconst DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n/**\r\n * 1 second\r\n */\n\nconst DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An error returned by the Firebase Storage SDK.\r\n * @public\r\n */\n\nclass StorageError extends FirebaseError {\n  /**\r\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\r\n   *  added to the end of the message.\r\n   * @param message  - Error message.\r\n   * @param status_ - Corresponding HTTP Status Code\r\n   */\n  constructor(code, message) {\n    let status_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    super(prependCode(code), `Firebase Storage: ${message} (${prependCode(code)})`);\n    this.status_ = status_;\n    /**\r\n     * Stores custom error data unique to the `StorageError`.\r\n     */\n\n    this.customData = {\n      serverResponse: null\n    };\n    this._baseMessage = this.message; // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status() {\n    return this.status_;\n  }\n\n  set status(status) {\n    this.status_ = status;\n  }\n  /**\r\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\r\n   */\n\n\n  _codeEquals(code) {\n    return prependCode(code) === this.code;\n  }\n  /**\r\n   * Optional response message that was added by the server.\r\n   */\n\n\n  get serverResponse() {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse) {\n    this.customData.serverResponse = serverResponse;\n\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n\n}\n/**\r\n * @public\r\n * Error codes that can be attached to `StorageError` objects.\r\n */\n\n\nvar StorageErrorCode;\n\n(function (StorageErrorCode) {\n  // Shared between all platforms\n  StorageErrorCode[\"UNKNOWN\"] = \"unknown\";\n  StorageErrorCode[\"OBJECT_NOT_FOUND\"] = \"object-not-found\";\n  StorageErrorCode[\"BUCKET_NOT_FOUND\"] = \"bucket-not-found\";\n  StorageErrorCode[\"PROJECT_NOT_FOUND\"] = \"project-not-found\";\n  StorageErrorCode[\"QUOTA_EXCEEDED\"] = \"quota-exceeded\";\n  StorageErrorCode[\"UNAUTHENTICATED\"] = \"unauthenticated\";\n  StorageErrorCode[\"UNAUTHORIZED\"] = \"unauthorized\";\n  StorageErrorCode[\"UNAUTHORIZED_APP\"] = \"unauthorized-app\";\n  StorageErrorCode[\"RETRY_LIMIT_EXCEEDED\"] = \"retry-limit-exceeded\";\n  StorageErrorCode[\"INVALID_CHECKSUM\"] = \"invalid-checksum\";\n  StorageErrorCode[\"CANCELED\"] = \"canceled\"; // JS specific\n\n  StorageErrorCode[\"INVALID_EVENT_NAME\"] = \"invalid-event-name\";\n  StorageErrorCode[\"INVALID_URL\"] = \"invalid-url\";\n  StorageErrorCode[\"INVALID_DEFAULT_BUCKET\"] = \"invalid-default-bucket\";\n  StorageErrorCode[\"NO_DEFAULT_BUCKET\"] = \"no-default-bucket\";\n  StorageErrorCode[\"CANNOT_SLICE_BLOB\"] = \"cannot-slice-blob\";\n  StorageErrorCode[\"SERVER_FILE_WRONG_SIZE\"] = \"server-file-wrong-size\";\n  StorageErrorCode[\"NO_DOWNLOAD_URL\"] = \"no-download-url\";\n  StorageErrorCode[\"INVALID_ARGUMENT\"] = \"invalid-argument\";\n  StorageErrorCode[\"INVALID_ARGUMENT_COUNT\"] = \"invalid-argument-count\";\n  StorageErrorCode[\"APP_DELETED\"] = \"app-deleted\";\n  StorageErrorCode[\"INVALID_ROOT_OPERATION\"] = \"invalid-root-operation\";\n  StorageErrorCode[\"INVALID_FORMAT\"] = \"invalid-format\";\n  StorageErrorCode[\"INTERNAL_ERROR\"] = \"internal-error\";\n  StorageErrorCode[\"UNSUPPORTED_ENVIRONMENT\"] = \"unsupported-environment\";\n})(StorageErrorCode || (StorageErrorCode = {}));\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  const message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nfunction objectNotFound(path) {\n  return new StorageError(StorageErrorCode.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new StorageError(StorageErrorCode.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  const message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nfunction unauthorizedApp() {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED_APP, 'This app does not have permission to access Firebase Storage on this project.');\n}\n\nfunction unauthorized(path) {\n  return new StorageError(StorageErrorCode.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new StorageError(StorageErrorCode.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new StorageError(StorageErrorCode.CANCELED, 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new StorageError(StorageErrorCode.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new StorageError(StorageErrorCode.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new StorageError(StorageErrorCode.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new StorageError(StorageErrorCode.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new StorageError(StorageErrorCode.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new StorageError(StorageErrorCode.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nfunction missingPolyFill(polyFill) {\n  return new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction invalidArgument(message) {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nfunction appDeleted() {\n  return new StorageError(StorageErrorCode.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n *\r\n * @internal\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new StorageError(StorageErrorCode.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new StorageError(StorageErrorCode.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new StorageError(StorageErrorCode.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Firebase Storage location data.\r\n *\r\n * @internal\r\n */\n\n\nclass Location {\n  constructor(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  get path() {\n    return this.path_;\n  }\n\n  get isRoot() {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl() {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString, host) {\n    let bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url, host) {\n    let location = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(`^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`, 'i');\n    const firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    const cloudStorageHost = host === DEFAULT_HOST ? '(?:storage.googleapis.com|storage.cloud.google.com)' : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(`^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`, 'i');\n    const cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    const groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  }\n\n}\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nclass FailRequest {\n  constructor(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel() {\n    let _appDelete = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Accepts a callback for an action to perform (`doRequest`),\r\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\r\n * The callback sent to start requires an argument to call (`onRequestComplete`).\r\n * When `start` calls `doRequest`, it passes a callback for when the request has\r\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\r\n * another call to `doRequest` and the above loop continues until the timeout\r\n * is hit, or a successful response occurs.\r\n * @description\r\n * @param doRequest Callback to perform request\r\n * @param backoffCompleteCb Callback to call when backoff has been completed\r\n */\n\n\nfunction start(doRequest, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nbackoffCompleteCb, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let retryTimeoutId = null; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let globalTimeoutId = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  let triggeredCallback = false;\n\n  function triggerCallback() {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout() {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success) {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    const mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    let waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  let stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n    clearGlobalTimeout();\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${minValue} or greater.`);\n  }\n\n  if (value > maxValue) {\n    throw invalidArgument(`Invalid value for '${argument}'. Expected ${maxValue} or less.`);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart, host, protocol) {\n  let origin = host;\n\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nfunction makeQueryString(params) {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Error codes for requests made by the the XhrIo wrapper.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Checks the status code to see if the action should be retried.\r\n *\r\n * @param status Current HTTP status code returned by server.\r\n * @param additionalRetryCodes additional retry codes to check against\r\n */\n\n\nfunction isRetryStatusCode(status, additionalRetryCodes) {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n  408, // Too Many Requests: you're getting rate-limited, basically.\n  429];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Handles network logic for all Storage Requests, including error reporting and\r\n * retries with backoff.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param - O the output type used by the rest of the SDK. The conversion\r\n * happens in the specified `callback_`.\r\n */\n\n\nclass NetworkRequest {\n  constructor(url_, method_, headers_, body_, successCodes_, additionalRetryCodes_, callback_, errorCallback_, timeout_, progressCallback_, connectionFactory_) {\n    let retry = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : true;\n    this.url_ = url_;\n    this.method_ = method_;\n    this.headers_ = headers_;\n    this.body_ = body_;\n    this.successCodes_ = successCodes_;\n    this.additionalRetryCodes_ = additionalRetryCodes_;\n    this.callback_ = callback_;\n    this.errorCallback_ = errorCallback_;\n    this.timeout_ = timeout_;\n    this.progressCallback_ = progressCallback_;\n    this.connectionFactory_ = connectionFactory_;\n    this.retry = retry;\n    this.pendingConnection_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  start_() {\n    const doTheRequest = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      } // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      connection.send(this.url_, this.method_, this.body_, this.headers_).then(() => {\n        if (this.progressCallback_ !== null) {\n          connection.removeUploadProgressListener(progressListener);\n        }\n\n        this.pendingConnection_ = null;\n        const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n        const status = connection.getStatus();\n\n        if (!hitServer || isRetryStatusCode(status, this.additionalRetryCodes_) && this.retry) {\n          const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        const successCode = this.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, connection));\n      });\n    };\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    const backoffDone = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection;\n\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n  /** @inheritDoc */\n\n\n  getPromise() {\n    return this.promise_;\n  }\n  /** @inheritDoc */\n\n\n  cancel(appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n\n}\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nclass RequestEndStatus {\n  constructor(wasSuccessCode, connection, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.connection = connection;\n    this.canceled = !!canceled;\n  }\n\n}\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers, firebaseVersion) {\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : 'AppManager');\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction addAppCheckHeader_(headers, appCheckToken) {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, appCheckToken, requestFactory, firebaseVersion) {\n  let retry = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, requestFactory, retry);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob$1() {\n  const BlobBuilder = getBlobBuilder();\n\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n\nfunction decodeBase64(encoded) {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n\n  return atob(encoded);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An enumeration of the possible string formats for upload.\r\n * @public\r\n */\n\n\nconst StringFormat = {\n  /**\r\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\r\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\r\n   * sequence.\r\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\r\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\r\n   */\n  RAW: 'raw',\n\n  /**\r\n   * Indicates the string should be interpreted as base64-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64: 'base64',\n\n  /**\r\n   * Indicates the string should be interpreted as base64url-encoded data.\r\n   * Padding characters (trailing '='s) are optional.\r\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\r\n   * ad 69 8e fb e1 3a b7 bf eb 97\r\n   */\n  BASE64URL: 'base64url',\n\n  /**\r\n   * Indicates the string is a data URL, such as one obtained from\r\n   * canvas.toDataURL().\r\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\r\n   * becomes the byte sequence\r\n   * 69 a6 9a\r\n   * (the content-type \"application/octet-stream\" is also applied, but can\r\n   * be overridden in the metadata object).\r\n   */\n  DATA_URL: 'data_url'\n};\n\nclass StringData {\n  constructor(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n}\n/**\r\n * @internal\r\n */\n\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  const b = [];\n\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  let decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        const hasMinus = value.indexOf('-') !== -1;\n        const hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          const invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        const hasPlus = value.indexOf('+') !== -1;\n        const hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          const invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  let bytes;\n\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if (e.message.includes('polyfill')) {\n      throw e;\n    }\n\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  const array = new Uint8Array(bytes.length);\n\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nclass DataURLParts {\n  constructor(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    const middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n}\n\nfunction dataURLBytes_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  const longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n *\r\n * @internal\r\n */\n\n\nclass FbsBlob {\n  constructor(data, elideCopy) {\n    let size = 0;\n    let blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size() {\n    return this.size_;\n  }\n\n  type() {\n    return this.type_;\n  }\n\n  slice(startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (isNativeBlobDefined()) {\n      const blobby = args.map(val => {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob$1.apply(null, blobby));\n    } else {\n      const uint8Arrays = args.map(val => {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      let finalLength = 0;\n      uint8Arrays.forEach(array => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach(array => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData() {\n    return this.data_;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  let obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  const index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  const canonicalChildPath = childPath.split('/').filter(component => component.length > 0).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  const index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nclass Mapping {\n  constructor(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n}\n\nlet mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  const mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  const nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  const sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  const metadata = {};\n  metadata['type'] = 'file';\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString, host, protocol) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  const tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map(token => {\n    const bucket = metadata['bucket'];\n    const path = metadata['fullPath'];\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  const resource = {};\n  const len = mappings.length;\n\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  const listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n\n      const reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(new Location(bucket, item['name']));\n\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  const obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  const resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n/**\r\n * Contains a fully specified request.\r\n *\r\n * @param I - the type of the backend's network response.\r\n * @param O - the output response type used by the rest of the SDK.\r\n */\n\n\nclass RequestInfo {\n  constructor(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN StorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text, service.host, service._protocol);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    let newErr;\n\n    if (xhr.getStatus() === 401) {\n      if ( // This exact message string is the only consistent part of the\n      // server's error response that identifies it as an App Check error.\n      xhr.getErrorText().includes('Firebase App Check token is invalid')) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    let newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata$2(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list$2(service, location, delimiter, pageToken, maxResults) {\n  const urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getBytes$1(service, location, maxDownloadSizeBytes) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, (_, data) => data, timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200\n    /* OK */\n    , 206\n    /* Partial Content */\n    ];\n  }\n\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata$2(service, location, metadata, mappings) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject$2(service, location) {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n/**\r\n * Prepare RequestInfo for uploads as Content-Type: multipart.\r\n */\n\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    let str = '';\n\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  const urlParams = {\n    name: metadata_['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nclass ResumableUploadStatus {\n  constructor(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n}\n\nfunction checkResumeHeader_(xhr, allowed) {\n  let status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    let url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  const headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nconst RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * An event that is triggered on a task.\r\n * @internal\r\n */\n\n\nconst TaskEvent = {\n  /**\r\n   * For this event,\r\n   * <ul>\r\n   *   <li>The `next` function is triggered on progress updates and when the\r\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\r\n   *       argument.</li>\r\n   *   <li>The `error` function is triggered if the upload is canceled or fails\r\n   *       for another reason.</li>\r\n   *   <li>The `complete` function is triggered if the upload completes\r\n   *       successfully.</li>\r\n   * </ul>\r\n   */\n  STATE_CHANGED: 'state_changed'\n}; // type keys = keyof TaskState\n\n/**\r\n * Represents the current state of a running upload.\r\n * @internal\r\n */\n\nconst TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case \"running\"\n    /* InternalTaskState.RUNNING */\n    :\n    case \"pausing\"\n    /* InternalTaskState.PAUSING */\n    :\n    case \"canceling\"\n    /* InternalTaskState.CANCELING */\n    :\n      return TaskState.RUNNING;\n\n    case \"paused\"\n    /* InternalTaskState.PAUSED */\n    :\n      return TaskState.PAUSED;\n\n    case \"success\"\n    /* InternalTaskState.SUCCESS */\n    :\n      return TaskState.SUCCESS;\n\n    case \"canceled\"\n    /* InternalTaskState.CANCELED */\n    :\n      return TaskState.CANCELED;\n\n    case \"error\"\n    /* InternalTaskState.ERROR */\n    :\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass Observer {\n  constructor(nextOrObserver, error, complete) {\n    const asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error !== null && error !== void 0 ? error : undefined;\n      this.complete = complete !== null && complete !== void 0 ? complete : undefined;\n    } else {\n      const observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    for (var _len5 = arguments.length, argsToForward = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      argsToForward[_key5] = arguments[_key5];\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/** An override for the text-based Connection. Used in tests. */\n\n\nlet textFactoryOverride = null;\n/**\r\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\r\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\r\n */\n\nclass XhrConnection {\n  constructor() {\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  send(url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  }\n\n  getErrorCode() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  }\n\n  getStatus() {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse() {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n\n    return this.xhr_.response;\n  }\n\n  getErrorText() {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n\n    return this.xhr_.statusText;\n  }\n  /** Aborts the request. */\n\n\n  abort() {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header) {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n\n}\n\nclass XhrTextConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'text';\n  }\n\n}\n\nfunction newTextConnection() {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nclass XhrBytesConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n\n}\n\nfunction newBytesConnection() {\n  return new XhrBytesConnection();\n}\n\nclass XhrBlobConnection extends XhrConnection {\n  initXhr() {\n    this.xhr_.responseType = 'blob';\n  }\n\n}\n\nfunction newBlobConnection() {\n  return new XhrBlobConnection();\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n * @internal\r\n */\n\n\nclass UploadTask {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  constructor(ref, blob) {\n    let metadata = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n    /**\r\n     * Number of bytes transferred so far.\r\n     */\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = \"running\"\n    /* InternalTaskState.RUNNING */\n    ;\n\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(this.sleepTime * 2, DEFAULT_MIN_SLEEP_TIME_MILLIS);\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n\n        this._error = error;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n      }\n    };\n\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, () => {});\n  }\n\n  isExponentialBackoffExpired() {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  _makeProgressCallback() {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  _shouldDoResumable(blob) {\n    return blob.size() > 256 * 1024;\n  }\n\n  _start() {\n    if (this._state !== \"running\"\n    /* InternalTaskState.RUNNING */\n    ) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  _resolveToken(callback) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([this._ref.storage._getAuthToken(), this._ref.storage._getAppCheckToken()]).then(_ref => {\n      let [authToken, appCheckToken] = _ref;\n\n      switch (this._state) {\n        case \"running\"\n        /* InternalTaskState.RUNNING */\n        :\n          callback(authToken, appCheckToken);\n          break;\n\n        case \"canceling\"\n        /* InternalTaskState.CANCELING */\n        :\n          this._transition(\"canceled\"\n          /* InternalTaskState.CANCELED */\n          );\n\n          break;\n\n        case \"pausing\"\n        /* InternalTaskState.PAUSING */\n        :\n          this._transition(\"paused\"\n          /* InternalTaskState.PAUSED */\n          );\n\n          break;\n      }\n    });\n  } // TODO(andysoto): assert false\n\n\n  _createResumable() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const createRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = createRequest;\n      createRequest.getPromise().then(url => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _fetchStatus() {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(this._ref.storage, this._ref._location, url, this._blob);\n\n      const statusRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status;\n        this._request = undefined;\n\n        this._updateProgress(status.current);\n\n        this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  _continueUpload() {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    const url = this._uploadUrl;\n\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(this._ref._location, this._ref.storage, url, this._blob, chunkSize, this._mappings, status, this._makeProgressCallback());\n      } catch (e) {\n        this._error = e;\n\n        this._transition(\"error\"\n        /* InternalTaskState.ERROR */\n        );\n\n        return;\n      }\n\n      const uploadRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken,\n      /*retry=*/\n      false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then(newStatus => {\n        this._increaseMultiplier();\n\n        this._request = undefined;\n\n        this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n\n          this._transition(\"success\"\n          /* InternalTaskState.SUCCESS */\n          );\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  _increaseMultiplier() {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  _fetchMetadata() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata$2(this._ref.storage, this._ref._location, this._mappings);\n\n      const metadataRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._transition(\"success\"\n        /* InternalTaskState.SUCCESS */\n        );\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  _oneShotUpload() {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(this._ref.storage, this._ref._location, this._mappings, this._blob, this._metadata);\n\n      const multipartRequest = this._ref.storage._makeRequest(requestInfo, newTextConnection, authToken, appCheckToken);\n\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n\n        this._updateProgress(this._blob.size());\n\n        this._transition(\"success\"\n        /* InternalTaskState.SUCCESS */\n        );\n      }, this._errorHandler);\n    });\n  }\n\n  _updateProgress(transferred) {\n    const old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  _transition(state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case \"canceling\"\n      /* InternalTaskState.CANCELING */\n      :\n      case \"pausing\"\n      /* InternalTaskState.PAUSING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n\n        break;\n\n      case \"running\"\n      /* InternalTaskState.RUNNING */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === \"paused\"\n        /* InternalTaskState.PAUSED */\n        ;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case \"paused\"\n      /* InternalTaskState.PAUSED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"canceled\"\n      /* InternalTaskState.CANCELED */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"error\"\n      /* InternalTaskState.ERROR */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case \"success\"\n      /* InternalTaskState.SUCCESS */\n      :\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  }\n\n  completeTransitions_() {\n    switch (this._state) {\n      case \"pausing\"\n      /* InternalTaskState.PAUSING */\n      :\n        this._transition(\"paused\"\n        /* InternalTaskState.PAUSED */\n        );\n\n        break;\n\n      case \"canceling\"\n      /* InternalTaskState.CANCELING */\n      :\n        this._transition(\"canceled\"\n        /* InternalTaskState.CANCELED */\n        );\n\n        break;\n\n      case \"running\"\n      /* InternalTaskState.RUNNING */\n      :\n        this._start();\n\n        break;\n    }\n  }\n  /**\r\n   * A snapshot of the current task state.\r\n   */\n\n\n  get snapshot() {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata,\n      task: this,\n      ref: this._ref\n    };\n  }\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   * @param nextOrObserver -\r\n   *     The `next` function, which gets called for each item in\r\n   *     the event stream, or an observer object with some or all of these three\r\n   *     properties (`next`, `error`, `complete`).\r\n   * @param error - A function that gets called with a `StorageError`\r\n   *     if the event stream ends due to an error.\r\n   * @param completed - A function that gets called if the\r\n   *     event stream ends normally.\r\n   * @returns\r\n   *     If only the event argument is passed, returns a function you can use to\r\n   *     add callbacks (see the examples above). If more than just the event\r\n   *     argument is passed, returns a function you can call to unregister the\r\n   *     callbacks.\r\n   */\n\n\n  on(type, nextOrObserver, error, completed) {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(nextOrObserver || undefined, error || undefined, completed || undefined);\n\n    this._addObserver(observer);\n\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  then(onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  catch(onRejected) {\n    return this.then(null, onRejected);\n  }\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  _addObserver(observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  }\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  _removeObserver(observer) {\n    const i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  _notifyObservers() {\n    this._finishPromise();\n\n    const observers = this._observers.slice();\n\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  _finishPromise() {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  _notifyObserver(observer) {\n    const externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  }\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  resume() {\n    const valid = this._state === \"paused\"\n    /* InternalTaskState.PAUSED */\n    || this._state === \"pausing\"\n    /* InternalTaskState.PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"running\"\n      /* InternalTaskState.RUNNING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  pause() {\n    const valid = this._state === \"running\"\n    /* InternalTaskState.RUNNING */\n    ;\n\n    if (valid) {\n      this._transition(\"pausing\"\n      /* InternalTaskState.PAUSING */\n      );\n    }\n\n    return valid;\n  }\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  cancel() {\n    const valid = this._state === \"running\"\n    /* InternalTaskState.RUNNING */\n    || this._state === \"pausing\"\n    /* InternalTaskState.PAUSING */\n    ;\n\n    if (valid) {\n      this._transition(\"canceling\"\n      /* InternalTaskState.CANCELING */\n      );\n    }\n\n    return valid;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @internal\r\n * @param _location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nclass Reference {\n  constructor(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n  /**\r\n   * Returns the URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  toString() {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  _newRef(service, location) {\n    return new Reference(service, location);\n  }\n  /**\r\n   * A reference to the root of this object's bucket.\r\n   */\n\n\n  get root() {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n  /**\r\n   * The name of the bucket containing this reference's object.\r\n   */\n\n\n  get bucket() {\n    return this._location.bucket;\n  }\n  /**\r\n   * The full path of this object.\r\n   */\n\n\n  get fullPath() {\n    return this._location.path;\n  }\n  /**\r\n   * The short name of this object, which is the last component of the full path.\r\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\r\n   */\n\n\n  get name() {\n    return lastComponent(this._location.path);\n  }\n  /**\r\n   * The `StorageService` instance this `StorageReference` is associated with.\r\n   */\n\n\n  get storage() {\n    return this._service;\n  }\n  /**\r\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\r\n   * this reference is the root.\r\n   */\n\n\n  get parent() {\n    const newPath = parent(this._location.path);\n\n    if (newPath === null) {\n      return null;\n    }\n\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n  /**\r\n   * Utility function to throw an error in methods that do not accept a root reference.\r\n   */\n\n\n  _throwIfRoot(name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded bytes.\r\n */\n\n\nfunction getBytesInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBytes');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBytesConnection).then(bytes => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  bytes.slice(0, maxDownloadSizeBytes) : bytes);\n}\n/**\r\n * Download the bytes at the object's location.\r\n * @returns A Promise containing the downloaded blob.\r\n */\n\n\nfunction getBlobInternal(ref, maxDownloadSizeBytes) {\n  ref._throwIfRoot('getBlob');\n\n  const requestInfo = getBytes$1(ref.storage, ref._location, maxDownloadSizeBytes);\n  return ref.storage.makeRequestWithTokens(requestInfo, newBlobConnection).then(blob => maxDownloadSizeBytes !== undefined ? // GCS may not honor the Range header for small files\n  blob.slice(0, maxDownloadSizeBytes) : blob);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n *\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytes');\n\n  const requestInfo = multipartUpload(ref.storage, ref._location, getMappings(), new FbsBlob(data, true), metadata);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(finalMetadata => {\n    return {\n      metadata: finalMetadata,\n      ref\n    };\n  });\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - StorageReference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded data.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable$1(ref, data, metadata) {\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - StorageReference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString$1(ref, value) {\n  let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : StringFormat.RAW;\n  let metadata = arguments.length > 3 ? arguments[3] : undefined;\n\n  ref._throwIfRoot('uploadString');\n\n  const data = dataFromString(format, value);\n  const metadataClone = Object.assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return uploadBytes$1(ref, data.data, metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - StorageReference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll$1(ref) {\n  const accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nasync function listAllHelper(ref, accumulator, pageToken) {\n  const opt = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list$1(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - StorageReference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$1(ref, options) {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber('options.maxResults',\n      /* minValue= */\n      1,\n      /* maxValue= */\n      1000, options.maxResults);\n    }\n  }\n\n  const op = options || {};\n  const requestInfo = list$2(ref.storage, ref._location,\n  /*delimiter= */\n  '/', op.pageToken, op.maxResults);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - StorageReference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  ref._throwIfRoot('getMetadata');\n\n  const requestInfo = getMetadata$2(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - StorageReference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  ref._throwIfRoot('updateMetadata');\n\n  const requestInfo = updateMetadata$2(ref.storage, ref._location, metadata, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL$1(ref) {\n  ref._throwIfRoot('getDownloadURL');\n\n  const requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection).then(url => {\n    if (url === null) {\n      throw noDownloadURL();\n    }\n\n    return url;\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - StorageReference for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  ref._throwIfRoot('deleteObject');\n\n  const requestInfo = deleteObject$2(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n *\r\n * @param ref - StorageReference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n *\r\n */\n\n\nfunction _getChild$1(ref, childPath) {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    const reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild$1(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref$1(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(host, config) {\n  const bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nfunction connectStorageEmulator$1(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const {\n    mockUserToken\n  } = options;\n\n  if (mockUserToken) {\n    storage._overrideAuthToken = typeof mockUserToken === 'string' ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n *\r\n * @internal\r\n */\n\n\nclass FirebaseStorageImpl {\n  constructor(\n  /**\r\n   * FirebaseApp associated with this StorageService instance.\r\n   */\n  app, _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _appCheckProvider,\n  /**\r\n   * @internal\r\n   */\n  _url, _firebaseVersion) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._appCheckProvider = _appCheckProvider;\n    this._url = _url;\n    this._firebaseVersion = _firebaseVersion;\n    this._bucket = null;\n    /**\r\n     * This string can be in the formats:\r\n     * - host\r\n     * - host:port\r\n     */\n\n    this._host = DEFAULT_HOST;\n    this._protocol = 'https';\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n  /**\r\n   * The host string for this service, in the form of `host` or\r\n   * `host:port`.\r\n   */\n\n\n  get host() {\n    return this._host;\n  }\n\n  set host(host) {\n    this._host = host;\n\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n  /**\r\n   * The maximum time to retry uploads in milliseconds.\r\n   */\n\n\n  get maxUploadRetryTime() {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxUploadRetryTime = time;\n  }\n  /**\r\n   * The maximum time to retry operations other than uploads or downloads in\r\n   * milliseconds.\r\n   */\n\n\n  get maxOperationRetryTime() {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time) {\n    validateNumber('time',\n    /* minValue=*/\n    0,\n    /* maxValue= */\n    Number.POSITIVE_INFINITY, time);\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken() {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n\n    const auth = this._authProvider.getImmediate({\n      optional: true\n    });\n\n    if (auth) {\n      const tokenData = await auth.getToken();\n\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n\n    return null;\n  }\n\n  async _getAppCheckToken() {\n    const appCheck = this._appCheckProvider.getImmediate({\n      optional: true\n    });\n\n    if (appCheck) {\n      const result = await appCheck.getToken(); // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n\n      return result.token;\n    }\n\n    return null;\n  }\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   */\n\n\n  _delete() {\n    if (!this._deleted) {\n      this._deleted = true;\n\n      this._requests.forEach(request => request.cancel());\n\n      this._requests.clear();\n    }\n\n    return Promise.resolve();\n  }\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  _makeStorageReference(loc) {\n    return new Reference(this, loc);\n  }\n  /**\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  _makeRequest(requestInfo, requestFactory, authToken, appCheckToken) {\n    let retry = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n    if (!this._deleted) {\n      const request = makeRequest(requestInfo, this._appId, authToken, appCheckToken, requestFactory, this._firebaseVersion, retry);\n\n      this._requests.add(request); // Request removes itself from set when complete.\n\n\n      request.getPromise().then(() => this._requests.delete(request), () => this._requests.delete(request));\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens(requestInfo, requestFactory) {\n    const [authToken, appCheckToken] = await Promise.all([this._getAuthToken(), this._getAppCheckToken()]);\n    return this._makeRequest(requestInfo, requestFactory, authToken, appCheckToken).getPromise();\n  }\n\n}\n\nconst name = \"@firebase/storage\";\nconst version = \"0.12.1\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise containing the object's bytes\r\n */\n\nfunction getBytes(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadBytes(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytes$1(ref, data, metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * The upload is not resumable.\r\n * @public\r\n * @param ref - {@link StorageReference} where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the string to upload.\r\n * @returns A Promise containing an UploadResult\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  ref = getModularInstance(ref);\n  return uploadString$1(ref, value, format, metadata);\n}\n/**\r\n * Uploads data to this object's location.\r\n * The upload can be paused and resumed, and exposes progress updates.\r\n * @public\r\n * @param ref - {@link StorageReference} where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the data to upload.\r\n * @returns An UploadTask\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  ref = getModularInstance(ref);\n  return uploadBytesResumable$1(ref, data, metadata);\n}\n/**\r\n * A `Promise` that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - {@link StorageReference} to get metadata from.\r\n */\n\n\nfunction getMetadata(ref) {\n  ref = getModularInstance(ref);\n  return getMetadata$1(ref);\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - {@link StorageReference} to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A `Promise` that resolves with the new metadata for this object.\r\n */\n\n\nfunction updateMetadata(ref, metadata) {\n  ref = getModularInstance(ref);\n  return updateMetadata$1(ref, metadata);\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - {@link StorageReference} to get list from.\r\n * @param options - See {@link ListOptions} for details.\r\n * @returns A `Promise` that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list(ref, options) {\n  ref = getModularInstance(ref);\n  return list$1(ref, options);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: `listAll` may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - {@link StorageReference} to get list from.\r\n *\r\n * @returns A `Promise` that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  ref = getModularInstance(ref);\n  return listAll$1(ref);\n}\n/**\r\n * Returns the download URL for the given {@link StorageReference}.\r\n * @public\r\n * @param ref - {@link StorageReference} to get the download URL for.\r\n * @returns A `Promise` that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  ref = getModularInstance(ref);\n  return getDownloadURL$1(ref);\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - {@link StorageReference} for object to delete.\r\n * @returns A `Promise` that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject(ref) {\n  ref = getModularInstance(ref);\n  return deleteObject$1(ref);\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return ref$1(serviceOrRef, pathOrUrl);\n}\n/**\r\n * @internal\r\n */\n\n\nfunction _getChild(ref, childPath) {\n  return _getChild$1(ref, childPath);\n}\n/**\r\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\r\n * @public\r\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\r\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\r\n * If not passed, uses the app's default Storage Bucket.\r\n * @returns A {@link FirebaseStorage} instance.\r\n */\n\n\nfunction getStorage() {\n  let app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  let bucketUrl = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  const storageProvider = _getProvider(app, STORAGE_TYPE);\n\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n\n  return storageInstance;\n}\n/**\r\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\r\n *\r\n * @param storage - The {@link FirebaseStorage} instance\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\r\n * token to use for unit testing Security Rules.\r\n * @public\r\n */\n\n\nfunction connectStorageEmulator(storage, host, port) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  connectStorageEmulator$1(storage, host, port, options);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Downloads the data at the object's location. Returns an error if the object\r\n * is not found.\r\n *\r\n * To use this functionality, you have to whitelist your app's origin in your\r\n * Cloud Storage bucket. See also\r\n * https://cloud.google.com/storage/docs/configuring-cors\r\n *\r\n * This API is not available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A Promise that resolves with a Blob containing the object's bytes\r\n */\n\n\nfunction getBlob(ref, maxDownloadSizeBytes) {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref, maxDownloadSizeBytes);\n}\n/**\r\n * Downloads the data at the object's location. Raises an error event if the\r\n * object is not found.\r\n *\r\n * This API is only available in Node.\r\n *\r\n * @public\r\n * @param ref - StorageReference where data should be downloaded.\r\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\r\n * retrieve.\r\n * @returns A stream with the object's data as bytes\r\n */\n\n\nfunction getStream(ref, maxDownloadSizeBytes) {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n/**\r\n * Cloud Storage for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n  return new FirebaseStorageImpl(app, authProvider, appCheckProvider, url, SDK_VERSION);\n}\n\nfunction registerStorage() {\n  _registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* ComponentType.PUBLIC */\n  ).setMultipleInstances(true)); //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n\n\n  registerVersion(name, version, ''); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n\nregisterStorage();\nexport { StorageError, StorageErrorCode, StringFormat, FbsBlob as _FbsBlob, Location as _Location, TaskEvent as _TaskEvent, TaskState as _TaskState, UploadTask as _UploadTask, dataFromString as _dataFromString, _getChild, invalidArgument as _invalidArgument, invalidRootOperation as _invalidRootOperation, connectStorageEmulator, deleteObject, getBlob, getBytes, getDownloadURL, getMetadata, getStorage, getStream, list, listAll, ref, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"mappings":"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","names":["DEFAULT_HOST","CONFIG_STORAGE_BUCKET_KEY","DEFAULT_MAX_OPERATION_RETRY_TIME","DEFAULT_MAX_UPLOAD_RETRY_TIME","DEFAULT_MIN_SLEEP_TIME_MILLIS","StorageError","FirebaseError","constructor","code","message","status_","prependCode","serverResponse","_baseMessage","Object","setPrototypeOf","prototype","status","_codeEquals","customData","StorageErrorCode","unknown","UNKNOWN","objectNotFound","path","OBJECT_NOT_FOUND","quotaExceeded","bucket","QUOTA_EXCEEDED","unauthenticated","UNAUTHENTICATED","unauthorizedApp","UNAUTHORIZED_APP","unauthorized","UNAUTHORIZED","retryLimitExceeded","RETRY_LIMIT_EXCEEDED","canceled","CANCELED","invalidUrl","url","INVALID_URL","invalidDefaultBucket","INVALID_DEFAULT_BUCKET","noDefaultBucket","NO_DEFAULT_BUCKET","cannotSliceBlob","CANNOT_SLICE_BLOB","serverFileWrongSize","SERVER_FILE_WRONG_SIZE","noDownloadURL","NO_DOWNLOAD_URL","missingPolyFill","polyFill","UNSUPPORTED_ENVIRONMENT","invalidArgument","INVALID_ARGUMENT","appDeleted","APP_DELETED","invalidRootOperation","name","INVALID_ROOT_OPERATION","format","INVALID_FORMAT","internalError","INTERNAL_ERROR","Location","path_","isRoot","length","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","host","bucketLocation","makeFromUrl","e","location","bucketDomain","gsModify","loc","charAt","slice","gsPath","gsRegex","RegExp","gsIndices","httpModify","decodeURIComponent","version","firebaseStorageHost","replace","firebaseStoragePath","firebaseStorageRegExp","firebaseStorageIndices","cloudStorageHost","cloudStoragePath","cloudStorageRegExp","cloudStorageIndices","groups","regex","indices","postModify","i","group","captures","exec","bucketValue","pathValue","FailRequest","error","promise_","Promise","reject","getPromise","cancel","_appDelete","start","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","args","apply","callWithDelay","millis","setTimeout","responseHandler","clearGlobalTimeout","clearTimeout","success","call","mustStop","waitMillis","Math","random","stopped","stop","wasTimeout","id","isJustDef","p","isFunction","isNonArrayObject","Array","isArray","isString","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","value","makeUrl","urlPart","protocol","origin","makeQueryString","params","queryPart","key","hasOwnProperty","nextPart","ErrorCode","additionalRetryCodes","isFiveHundredCode","extraRetryCodes","isExtraRetryCode","indexOf","isAdditionalRetryCode","NetworkRequest","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","retry","url_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve","resolve_","reject_","start_","doTheRequest","backoffCallback","RequestEndStatus","connection","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","getErrorCode","NO_ERROR","getStatus","isRetryStatusCode","wasCanceled","ABORT","successCode","backoffDone","requestWentThrough","wasSuccessCode","result","getResponse","err","getErrorText","appDelete","abort","headers","authToken","firebaseVersion","appId","appCheckToken","makeRequest","requestInfo","requestFactory","urlParams","assign","addGmpidHeader_","addAuthHeader_","addVersionHeader_","addAppCheckHeader_","method","body","successCodes","handler","errorHandler","progressCallback","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","undefined","bb","append","getBlob","sliceBlob","blob","end","webkitSlice","mozSlice","decodeBase64","encoded","atob","RAW","BASE64","BASE64URL","DATA_URL","StringData","contentType","data","stringData","StringFormat","utf8Bytes_","base64Bytes_","dataURLBytes_","dataURLContentType_","b","c","charCodeAt","push","valid","hi","lo","Uint8Array","percentEncodedBytes_","decoded","invalidFormat","hasMinus","hasUnder","invalidChar","hasPlus","hasSlash","bytes","includes","array","DataURLParts","dataURL","base64","matches","match","middle","endsWith","substring","rest","dataUrl","parts","s","longEnough","FbsBlob","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","realBlob","sliced","buffer","blobby","map","val","uint8Arrays","dataFromString","finalLength","forEach","merged","index","uploadData","jsonObjectOrNull","obj","JSON","parse","parent","lastIndexOf","newPath","childPath","canonicalChildPath","split","filter","component","join","lastComponent","metadata","Mapping","server","local","writable","xform","noXform_","mappings_","xformPath","fullPath","getMappings","mappings","mappingsXformPath","_metadata","nameMapping","xformSize","Number","sizeMapping","service","generateRef","_makeStorageReference","defineProperty","get","fromResource","resource","len","mapping","addRef","fromResourceString","resourceString","downloadUrlFromResourceString","tokens","tokensList","urls","token","base","queryString","alt","stringify","PREFIXES_KEY","ITEMS_KEY","fromBackendResponse","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromResponseString","RequestInfo","handlerCheck","cndn","xhr","text","_protocol","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","metadataHandler","list","delimiter","pageToken","maxResults","listHandler","getBytes","maxDownloadSizeBytes","_","getDownloadUrl","downloadUrlHandler","updateMetadata","toResourceString","_xhr","_text","metadataForUpload_","metadataClone","determineContentType_","multipartUpload","genBoundary","str","toString","boundary","metadata_","metadataString","preBlobPart","postBlobPart","maxUploadRetryTime","ResumableUploadStatus","current","finalized","allowed","getResponseHeader","allowedStatus","createResumableUpload","metadataForUpload","checkResumeHeader_","getResumableUploadStatus","sizeString","isNaN","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","bytesLeft","bytesToUpload","min","uploadCommand","uploadStatus","newCurrent","STATE_CHANGED","RUNNING","PAUSED","SUCCESS","ERROR","taskStateFromInternalTaskState","state","TaskState","Observer","nextOrObserver","complete","asFunctions","next","observer","async","f","argsToForward","textFactoryOverride","XhrConnection","sent_","xhr_","XMLHttpRequest","initXhr","errorCode_","sendPromise_","addEventListener","NETWORK_ERROR","open","setRequestHeader","response","statusText","header","listener","upload","removeEventListener","XhrTextConnection","responseType","newTextConnection","XhrBytesConnection","newBytesConnection","XhrBlobConnection","newBlobConnection","UploadTask","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","backoffExpired","isExponentialBackoffExpired","sleepTime","max","_transition","_metadataErrorHandler","maxSleepTime","storage","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","pendingTimeout","_continueUpload","_oneShotUpload","_resolveToken","callback","all","_getAuthToken","_getAppCheckToken","_location","createRequest","_makeRequest","statusRequest","uploadRequest","newStatus","_increaseMultiplier","currentSize","metadataRequest","multipartRequest","transferred","old","_notifyObservers","wasPaused","snapshot","externalState","bytesTransferred","totalBytes","task","on","completed","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","observers","triggered","fbsAsync","bind","toCall","resume","pause","Reference","_service","_newRef","root","_throwIfRoot","makeRequestWithTokens","uploadBytes","finalMetadata","uploadBytesResumable","listAll","accumulator","listAllHelper","opt","nextPage","options","op","requestsList","requestsGetMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","requestsDeleteObject","child","isUrl","test","refFromURL","refFromPath","FirebaseStorageImpl","_bucket","_getChild","serviceOrRef","pathOrUrl","extractBucket","config","connectStorageEmulator","port","mockUserToken","_overrideAuthToken","createMockUserToken","app","projectId","_authProvider","_appCheckProvider","_url","_firebaseVersion","_host","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","time","POSITIVE_INFINITY","auth","getImmediate","optional","tokenData","getToken","accessToken","appCheck","_delete","request","clear","add","delete","STORAGE_TYPE","getModularInstance","getBytesInternal","uploadBytesInternal","uploadString","uploadStringInternal","uploadBytesResumableInternal","getMetadataInternal","updateMetadataInternal","listInternal","listAllInternal","getDownloadURLInternal","deleteObjectInternal","refInternal","_getChildInternal","getStorage","getApp","bucketUrl","storageProvider","_getProvider","storageInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","connectEmulatorInternal","getBlobInternal","Error","factory","container","instanceIdentifier","getProvider","authProvider","appCheckProvider","SDK_VERSION","registerStorage","_registerComponent","Component","setMultipleInstances","registerVersion"],"sources":["C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\constants.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\error.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\location.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\failrequest.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\backoff.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\type.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\url.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\connection.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\utils.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\request.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\fs.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\platform\\browser\\base64.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\string.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\blob.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\json.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\path.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\metadata.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\list.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\requestinfo.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\requests.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\taskenums.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\observer.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\implementation\\async.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\platform\\browser\\connection.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\task.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\reference.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\service.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\constants.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\api.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\api.browser.ts","C:\\Users\\osibe\\oo158\\Firebase-ecom\\node_modules\\@firebase\\storage\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * 1 second\n */\nexport const DEFAULT_MIN_SLEEP_TIME_MILLIS = 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { missingPolyFill } from '../../implementation/error';\n\n/** Converts a Base64 encoded string to a binary string. */\nexport function decodeBase64(encoded: string): string {\n  if (typeof atob === 'undefined') {\n    throw missingPolyFill('base-64');\n  }\n  return atob(encoded);\n}\n\nexport function decodeUint8Array(data: Uint8Array): string {\n  return new TextDecoder().decode(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = (typeof StringFormat)[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { FirebaseStorageImpl } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: FirebaseStorageImpl): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: FirebaseStorageImpl,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: FirebaseStorageImpl,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string,\n  host: string,\n  protocol: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart, host, protocol);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: FirebaseStorageImpl,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as unknown as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Headers, Connection, ConnectionType } from './connection';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\n/**\n * A function that converts a server response to the API type expected by the\n * SDK.\n *\n * @param I - the type of the backend's network response\n * @param O - the output response type used by the rest of the SDK.\n */\nexport type RequestHandler<I extends ConnectionType, O> = (\n  connection: Connection<I>,\n  response: I\n) => O;\n\n/** A function to handle an error. */\nexport type ErrorHandler = (\n  connection: Connection<ConnectionType>,\n  response: StorageError\n) => StorageError;\n\n/**\n * Contains a fully specified request.\n *\n * @param I - the type of the backend's network response.\n * @param O - the output response type used by the rest of the SDK.\n */\nexport class RequestInfo<I extends ConnectionType, O> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n  errorHandler: ErrorHandler | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: RequestHandler<I, O>,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n * @internal\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport type TaskState = (typeof TaskState)[keyof typeof TaskState];\n\n// type keys = keyof TaskState\n/**\n * Represents the current state of a running upload.\n * @internal\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n} as const;\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { StorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `StorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `StorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `StorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error ?? undefined;\n      this.complete = complete ?? undefined;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Connection,\n  ConnectionType,\n  ErrorCode,\n  Headers\n} from '../../implementation/connection';\nimport { internalError } from '../../implementation/error';\n\n/** An override for the text-based Connection. Used in tests. */\nlet textFactoryOverride: (() => Connection<string>) | null = null;\n\n/**\n * Network layer for browsers. We use this instead of goog.net.XhrIo because\n * goog.net.XhrIo is hyuuuuge and doesn't work in React Native on Android.\n */\nabstract class XhrConnection<T extends ConnectionType>\n  implements Connection<T>\n{\n  protected xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<void>;\n  protected sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.initXhr();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve();\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve();\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve();\n      });\n    });\n  }\n\n  abstract initXhr(): void;\n\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<void> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  getResponse(): T {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponse() before sending');\n    }\n    return this.xhr_.response;\n  }\n\n  getErrorText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorText() before sending');\n    }\n    return this.xhr_.statusText;\n  }\n\n  /** Aborts the request. */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n\nexport class XhrTextConnection extends XhrConnection<string> {\n  initXhr(): void {\n    this.xhr_.responseType = 'text';\n  }\n}\n\nexport function newTextConnection(): Connection<string> {\n  return textFactoryOverride ? textFactoryOverride() : new XhrTextConnection();\n}\n\nexport class XhrBytesConnection extends XhrConnection<ArrayBuffer> {\n  private data_?: ArrayBuffer;\n\n  initXhr(): void {\n    this.xhr_.responseType = 'arraybuffer';\n  }\n}\n\nexport function newBytesConnection(): Connection<ArrayBuffer> {\n  return new XhrBytesConnection();\n}\n\nexport class XhrBlobConnection extends XhrConnection<Blob> {\n  initXhr(): void {\n    this.xhr_.responseType = 'blob';\n  }\n}\n\nexport function newBlobConnection(): Connection<Blob> {\n  return new XhrBlobConnection();\n}\n\nexport function newStreamConnection(): Connection<NodeJS.ReadableStream> {\n  throw new Error('Streams are only supported on Node');\n}\n\nexport function injectTestConnection(\n  factory: (() => Connection<string>) | null\n): void {\n  textFactoryOverride = factory;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  StorageError,\n  retryLimitExceeded\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  Observer,\n  Subscribe,\n  Unsubscribe,\n  StorageObserver as StorageObserverInternal,\n  NextFn\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot, StorageObserver } from './public-types';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\nimport { newTextConnection } from './platform/connection';\nimport { isRetryStatusCode } from './implementation/utils';\nimport { CompleteFn } from '@firebase/util';\nimport { DEFAULT_MIN_SLEEP_TIME_MILLIS } from './implementation/constants';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserverInternal<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: StorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: StorageError) => void;\n  private _metadataErrorHandler: (p1: StorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: StorageError) => void = undefined;\n  private pendingTimeout?: ReturnType<typeof setTimeout>;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  private sleepTime: number;\n\n  private maxSleepTime: number;\n\n  isExponentialBackoffExpired(): boolean {\n    return this.sleepTime > this.maxSleepTime;\n  }\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        const backoffExpired = this.isExponentialBackoffExpired();\n        if (isRetryStatusCode(error.status, [])) {\n          if (backoffExpired) {\n            error = retryLimitExceeded();\n          } else {\n            this.sleepTime = Math.max(\n              this.sleepTime * 2,\n              DEFAULT_MIN_SLEEP_TIME_MILLIS\n            );\n            this._needToFetchStatus = true;\n            this.completeTransitions_();\n            return;\n          }\n        }\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this.sleepTime = 0;\n    this.maxSleepTime = this._ref.storage.maxUploadRetryTime;\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this.pendingTimeout = setTimeout(() => {\n              this.pendingTimeout = undefined;\n              this._continueUpload();\n            }, this.sleepTime);\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(\n    callback: (authToken: string | null, appCheckToken: string | null) => void\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all([\n      this._ref.storage._getAuthToken(),\n      this._ref.storage._getAppCheckToken()\n    ]).then(([authToken, appCheckToken]) => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken, appCheckToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken((authToken, appCheckToken) => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e as StorageError;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken,\n        /*retry=*/ false // Upload requests should not be retried as each retry should be preceded by another query request. Which is handled in this file.\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize * 2 < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken((authToken, appCheckToken) => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        newTextConnection,\n        authToken,\n        appCheckToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        } else if (this.pendingTimeout) {\n          clearTimeout(this.pendingTimeout);\n          this.pendingTimeout = undefined;\n          this.completeTransitions_();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `StorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | null\n      | ((snapshot: UploadTaskSnapshot) => unknown),\n    error?: ((a: StorageError) => unknown) | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    // Note: `type` isn't being used. Its type is also incorrect. TaskEvent should not be a string.\n    const observer = new Observer(\n      (nextOrObserver as\n        | StorageObserverInternal<UploadTaskSnapshot>\n        | NextFn<UploadTaskSnapshot>) || undefined,\n      error || undefined,\n      completed || undefined\n    );\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: StorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(onRejected: (p1: StorageError) => T | Promise<T>): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: StorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as StorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as StorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { PassThrough, Transform, TransformOptions } from 'stream';\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, lastComponent, parent } from './implementation/path';\nimport {\n  deleteObject as requestsDeleteObject,\n  getBytes,\n  getDownloadUrl as requestsGetDownloadUrl,\n  getMetadata as requestsGetMetadata,\n  list as requestsList,\n  multipartUpload,\n  updateMetadata as requestsUpdateMetadata\n} from './implementation/requests';\nimport { ListOptions, UploadResult } from './public-types';\nimport { dataFromString, StringFormat } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { FirebaseStorageImpl } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport {\n  newBlobConnection,\n  newBytesConnection,\n  newStreamConnection,\n  newTextConnection\n} from './platform/connection';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(\n    private _service: FirebaseStorageImpl,\n    location: string | Location\n  ) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location, _service.host);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(\n    service: FirebaseStorageImpl,\n    location: Location\n  ): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): FirebaseStorageImpl {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded bytes.\n */\nexport function getBytesInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref._throwIfRoot('getBytes');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBytesConnection)\n    .then(bytes =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (bytes as ArrayBuffer).slice(0, maxDownloadSizeBytes)\n        : (bytes as ArrayBuffer)\n    );\n}\n\n/**\n * Download the bytes at the object's location.\n * @returns A Promise containing the downloaded blob.\n */\nexport function getBlobInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref._throwIfRoot('getBlob');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newBlobConnection)\n    .then(blob =>\n      maxDownloadSizeBytes !== undefined\n        ? // GCS may not honor the Range header for small files\n          (blob as Blob).slice(0, maxDownloadSizeBytes)\n        : (blob as Blob)\n    );\n}\n\n/** Stream the bytes at the object's location. */\nexport function getStreamInternal(\n  ref: Reference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  ref._throwIfRoot('getStream');\n  const requestInfo = getBytes(\n    ref.storage,\n    ref._location,\n    maxDownloadSizeBytes\n  );\n\n  /** A transformer that passes through the first n bytes. */\n  const newMaxSizeTransform: (n: number) => TransformOptions = n => {\n    let missingBytes = n;\n    return {\n      transform(chunk, encoding, callback) {\n        // GCS may not honor the Range header for small files\n        if (chunk.length < missingBytes) {\n          this.push(chunk);\n          missingBytes -= chunk.length;\n        } else {\n          this.push(chunk.slice(0, missingBytes));\n          this.emit('end');\n        }\n        callback();\n      }\n    } as TransformOptions;\n  };\n\n  const result =\n    maxDownloadSizeBytes !== undefined\n      ? new Transform(newMaxSizeTransform(maxDownloadSizeBytes))\n      : new PassThrough();\n\n  ref.storage\n    .makeRequestWithTokens(requestInfo, newStreamConnection)\n    .then(stream => (stream as NodeJS.ReadableStream).pipe(result))\n    .catch(e => result.destroy(e));\n  return result;\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  const requestInfo = multipartUpload(\n    ref.storage,\n    ref._location,\n    getMappings(),\n    new FbsBlob(data, true),\n    metadata\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequestWithTokens(requestInfo, newTextConnection)\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequestWithTokens(requestInfo, newTextConnection);\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_HOST,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from './implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { FirebaseStorage } from './public-types';\nimport { createMockUserToken, EmulatorMockTokenOptions } from '@firebase/util';\nimport { Connection, ConnectionType } from './implementation/connection';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: FirebaseStorageImpl, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof FirebaseStorageImpl) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorageImpl, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorageImpl | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: FirebaseStorageImpl | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof FirebaseStorageImpl) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(\n  host: string,\n  config?: FirebaseOptions\n): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString, host);\n}\n\nexport function connectStorageEmulator(\n  storage: FirebaseStorageImpl,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  storage.host = `${host}:${port}`;\n  storage._protocol = 'http';\n  const { mockUserToken } = options;\n  if (mockUserToken) {\n    storage._overrideAuthToken =\n      typeof mockUserToken === 'string'\n        ? mockUserToken\n        : createMockUserToken(mockUserToken, storage.app.options.projectId);\n  }\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n *\n * @internal\n */\nexport class FirebaseStorageImpl implements FirebaseStorage {\n  _bucket: Location | null = null;\n  /**\n   * This string can be in the formats:\n   * - host\n   * - host:port\n   */\n  private _host: string = DEFAULT_HOST;\n  _protocol: string = 'https';\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n  _overrideAuthToken?: string;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _appCheckProvider: Provider<AppCheckInternalComponentName>,\n    /**\n     * @internal\n     */\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url, this._host);\n    } else {\n      this._bucket = extractBucket(this._host, this.app.options);\n    }\n  }\n\n  /**\n   * The host string for this service, in the form of `host` or\n   * `host:port`.\n   */\n  get host(): string {\n    return this._host;\n  }\n\n  set host(host: string) {\n    this._host = host;\n    if (this._url != null) {\n      this._bucket = Location.makeFromBucketSpec(this._url, host);\n    } else {\n      this._bucket = extractBucket(host, this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    if (this._overrideAuthToken) {\n      return this._overrideAuthToken;\n    }\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  async _getAppCheckToken(): Promise<string | null> {\n    const appCheck = this._appCheckProvider.getImmediate({ optional: true });\n    if (appCheck) {\n      const result = await appCheck.getToken();\n      // TODO: What do we want to do if there is an error getting the token?\n      // Context: appCheck.getToken() will never throw even if an error happened. In the error case, a dummy token will be\n      // returned along with an error field describing the error. In general, we shouldn't care about the error condition and just use\n      // the token (actual or dummy) to send requests.\n      return result.token;\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    if (!this._deleted) {\n      this._deleted = true;\n      this._requests.forEach(request => request.cancel());\n      this._requests.clear();\n    }\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>,\n    authToken: string | null,\n    appCheckToken: string | null,\n    retry = true\n  ): Request<O> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        appCheckToken,\n        requestFactory,\n        this._firebaseVersion,\n        retry\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n\n  async makeRequestWithTokens<I extends ConnectionType, O>(\n    requestInfo: RequestInfo<I, O>,\n    requestFactory: () => Connection<I>\n  ): Promise<O> {\n    const [authToken, appCheckToken] = await Promise.all([\n      this._getAuthToken(),\n      this._getAppCheckToken()\n    ]);\n\n    return this._makeRequest(\n      requestInfo,\n      requestFactory,\n      authToken,\n      appCheckToken\n    ).getPromise();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Storage.\n */\nexport const STORAGE_TYPE = 'storage';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\n\nimport {\n  ref as refInternal,\n  FirebaseStorageImpl,\n  connectStorageEmulator as connectEmulatorInternal\n} from './service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  FirebaseStorage,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from './metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal,\n  getBytesInternal\n} from './reference';\nimport { STORAGE_TYPE } from './constants';\nimport {\n  EmulatorMockTokenOptions,\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\nimport { StringFormat } from './implementation/string';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n\nexport { StorageError, StorageErrorCode } from './implementation/error';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from './implementation/location';\nexport { UploadTask as _UploadTask } from './task';\nexport type { Reference as _Reference } from './reference';\nexport type { FirebaseStorageImpl as _FirebaseStorageImpl } from './service';\nexport { FbsBlob as _FbsBlob } from './implementation/blob';\nexport { dataFromString as _dataFromString } from './implementation/string';\nexport {\n  invalidRootOperation as _invalidRootOperation,\n  invalidArgument as _invalidArgument\n} from './implementation/error';\nexport {\n  TaskEvent as _TaskEvent,\n  TaskState as _TaskState\n} from './implementation/taskenums';\nexport { StringFormat };\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise containing the object's bytes\n */\nexport function getBytes(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<ArrayBuffer> {\n  ref = getModularInstance(ref);\n  return getBytesInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - {@link StorageReference} where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: StringFormat,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - {@link StorageReference} where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A `Promise` that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - {@link StorageReference} to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - {@link StorageReference} to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A `Promise` that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - {@link StorageReference} to get list from.\n * @param options - See {@link ListOptions} for details.\n * @returns A `Promise` that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: `listAll` may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - {@link StorageReference} to get list from.\n *\n * @returns A `Promise` that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given {@link StorageReference}.\n * @public\n * @param ref - {@link StorageReference} to get the download URL for.\n * @returns A `Promise` that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - {@link StorageReference} for object to delete.\n * @returns A `Promise` that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a {@link StorageReference} for the given url.\n * @param storage - {@link FirebaseStorage} instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: FirebaseStorage, url?: string): StorageReference;\n/**\n * Returns a {@link StorageReference} for the given path in the\n * default bucket.\n * @param storageOrRef - {@link FirebaseStorage} or {@link StorageReference}.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if {@link FirebaseStorage}\n * instance provided) or returns same reference (if {@link StorageReference} provided).\n * @public\n */\nexport function ref(\n  storageOrRef: FirebaseStorage | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: FirebaseStorage | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as FirebaseStorageImpl | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\n/**\n * Gets a {@link FirebaseStorage} instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get {@link FirebaseStorage} instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A {@link FirebaseStorage} instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): FirebaseStorage {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage'> = _getProvider(app, STORAGE_TYPE);\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('storage');\n  if (emulator) {\n    connectStorageEmulator(storageInstance, ...emulator);\n  }\n  return storageInstance;\n}\n\n/**\n * Modify this {@link FirebaseStorage} instance to communicate with the Cloud Storage emulator.\n *\n * @param storage - The {@link FirebaseStorage} instance\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @param options - Emulator options. `options.mockUserToken` is the mock auth\n * token to use for unit testing Security Rules.\n * @public\n */\nexport function connectStorageEmulator(\n  storage: FirebaseStorage,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  connectEmulatorInternal(storage as FirebaseStorageImpl, host, port, options);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageReference } from './public-types';\nimport { Reference, getBlobInternal } from './reference';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Downloads the data at the object's location. Returns an error if the object\n * is not found.\n *\n * To use this functionality, you have to whitelist your app's origin in your\n * Cloud Storage bucket. See also\n * https://cloud.google.com/storage/docs/configuring-cors\n *\n * This API is not available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A Promise that resolves with a Blob containing the object's bytes\n */\nexport function getBlob(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): Promise<Blob> {\n  ref = getModularInstance(ref);\n  return getBlobInternal(ref as Reference, maxDownloadSizeBytes);\n}\n\n/**\n * Downloads the data at the object's location. Raises an error event if the\n * object is not found.\n *\n * This API is only available in Node.\n *\n * @public\n * @param ref - StorageReference where data should be downloaded.\n * @param maxDownloadSizeBytes - If set, the maximum allowed size in bytes to\n * retrieve.\n * @returns A stream with the object's data as bytes\n */\nexport function getStream(\n  ref: StorageReference,\n  maxDownloadSizeBytes?: number\n): NodeJS.ReadableStream {\n  throw new Error('getStream() is only supported by NodeJS builds');\n}\n","/**\n * Cloud Storage for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\n\nimport { FirebaseStorageImpl } from '../src/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\nimport { FirebaseStorage } from './public-types';\nimport { STORAGE_TYPE } from './constants';\n\nexport * from './api';\nexport * from './api.browser';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): FirebaseStorage {\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const appCheckProvider = container.getProvider('app-check-internal');\n\n  return new FirebaseStorageImpl(\n    app,\n    authProvider,\n    appCheckProvider,\n    url,\n    SDK_VERSION\n  );\n}\n\nfunction registerStorage(): void {\n  _registerComponent(\n    new Component(\n      STORAGE_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  //RUNTIME_ENV will be replaced during the compilation to \"node\" for nodejs and an empty string for browser\n  registerVersion(name, version, '__RUNTIME_ENV__');\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterStorage();\n"]},"metadata":{},"sourceType":"module"}